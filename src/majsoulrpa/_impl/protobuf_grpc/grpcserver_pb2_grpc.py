# Generated by the gRPC Python protocol compiler plugin. DO NOT EDIT!
"""Client and server classes corresponding to protobuf-defined services."""
import grpc

import grpcserver_pb2 as grpcserver__pb2


class GRPCServerStub(object):
    """Missing associated documentation comment in .proto file."""

    def __init__(self, channel):
        """Constructor.

        Args:
            channel: A grpc.Channel.
        """
        self.push_message = channel.unary_unary(
                '/grpcserver.GRPCServer/push_message',
                request_serializer=grpcserver__pb2.Message.SerializeToString,
                response_deserializer=grpcserver__pb2.Void.FromString,
                )
        self.pop_message = channel.unary_unary(
                '/grpcserver.GRPCServer/pop_message',
                request_serializer=grpcserver__pb2.Timeout.SerializeToString,
                response_deserializer=grpcserver__pb2.Message.FromString,
                )
        self.push_browser_request = channel.unary_unary(
                '/grpcserver.GRPCServer/push_browser_request',
                request_serializer=grpcserver__pb2.BrowserRequest.SerializeToString,
                response_deserializer=grpcserver__pb2.Void.FromString,
                )
        self.pop_browser_request = channel.unary_unary(
                '/grpcserver.GRPCServer/pop_browser_request',
                request_serializer=grpcserver__pb2.Timeout.SerializeToString,
                response_deserializer=grpcserver__pb2.BrowserRequest.FromString,
                )
        self.len_browser_request = channel.unary_unary(
                '/grpcserver.GRPCServer/len_browser_request',
                request_serializer=grpcserver__pb2.Void.SerializeToString,
                response_deserializer=grpcserver__pb2.QueueSize.FromString,
                )
        self.push_browser_response = channel.unary_unary(
                '/grpcserver.GRPCServer/push_browser_response',
                request_serializer=grpcserver__pb2.BrowserResponse.SerializeToString,
                response_deserializer=grpcserver__pb2.Void.FromString,
                )
        self.pop_browser_response = channel.unary_unary(
                '/grpcserver.GRPCServer/pop_browser_response',
                request_serializer=grpcserver__pb2.Timeout.SerializeToString,
                response_deserializer=grpcserver__pb2.BrowserResponse.FromString,
                )


class GRPCServerServicer(object):
    """Missing associated documentation comment in .proto file."""

    def push_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pop_message(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def push_browser_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pop_browser_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def len_browser_request(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def push_browser_response(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')

    def pop_browser_response(self, request, context):
        """Missing associated documentation comment in .proto file."""
        context.set_code(grpc.StatusCode.UNIMPLEMENTED)
        context.set_details('Method not implemented!')
        raise NotImplementedError('Method not implemented!')


def add_GRPCServerServicer_to_server(servicer, server):
    rpc_method_handlers = {
            'push_message': grpc.unary_unary_rpc_method_handler(
                    servicer.push_message,
                    request_deserializer=grpcserver__pb2.Message.FromString,
                    response_serializer=grpcserver__pb2.Void.SerializeToString,
            ),
            'pop_message': grpc.unary_unary_rpc_method_handler(
                    servicer.pop_message,
                    request_deserializer=grpcserver__pb2.Timeout.FromString,
                    response_serializer=grpcserver__pb2.Message.SerializeToString,
            ),
            'push_browser_request': grpc.unary_unary_rpc_method_handler(
                    servicer.push_browser_request,
                    request_deserializer=grpcserver__pb2.BrowserRequest.FromString,
                    response_serializer=grpcserver__pb2.Void.SerializeToString,
            ),
            'pop_browser_request': grpc.unary_unary_rpc_method_handler(
                    servicer.pop_browser_request,
                    request_deserializer=grpcserver__pb2.Timeout.FromString,
                    response_serializer=grpcserver__pb2.BrowserRequest.SerializeToString,
            ),
            'len_browser_request': grpc.unary_unary_rpc_method_handler(
                    servicer.len_browser_request,
                    request_deserializer=grpcserver__pb2.Void.FromString,
                    response_serializer=grpcserver__pb2.QueueSize.SerializeToString,
            ),
            'push_browser_response': grpc.unary_unary_rpc_method_handler(
                    servicer.push_browser_response,
                    request_deserializer=grpcserver__pb2.BrowserResponse.FromString,
                    response_serializer=grpcserver__pb2.Void.SerializeToString,
            ),
            'pop_browser_response': grpc.unary_unary_rpc_method_handler(
                    servicer.pop_browser_response,
                    request_deserializer=grpcserver__pb2.Timeout.FromString,
                    response_serializer=grpcserver__pb2.BrowserResponse.SerializeToString,
            ),
    }
    generic_handler = grpc.method_handlers_generic_handler(
            'grpcserver.GRPCServer', rpc_method_handlers)
    server.add_generic_rpc_handlers((generic_handler,))


 # This class is part of an EXPERIMENTAL API.
class GRPCServer(object):
    """Missing associated documentation comment in .proto file."""

    @staticmethod
    def push_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/push_message',
            grpcserver__pb2.Message.SerializeToString,
            grpcserver__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pop_message(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/pop_message',
            grpcserver__pb2.Timeout.SerializeToString,
            grpcserver__pb2.Message.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def push_browser_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/push_browser_request',
            grpcserver__pb2.BrowserRequest.SerializeToString,
            grpcserver__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pop_browser_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/pop_browser_request',
            grpcserver__pb2.Timeout.SerializeToString,
            grpcserver__pb2.BrowserRequest.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def len_browser_request(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/len_browser_request',
            grpcserver__pb2.Void.SerializeToString,
            grpcserver__pb2.QueueSize.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def push_browser_response(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/push_browser_response',
            grpcserver__pb2.BrowserResponse.SerializeToString,
            grpcserver__pb2.Void.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)

    @staticmethod
    def pop_browser_response(request,
            target,
            options=(),
            channel_credentials=None,
            call_credentials=None,
            insecure=False,
            compression=None,
            wait_for_ready=None,
            timeout=None,
            metadata=None):
        return grpc.experimental.unary_unary(request, target, '/grpcserver.GRPCServer/pop_browser_response',
            grpcserver__pb2.Timeout.SerializeToString,
            grpcserver__pb2.BrowserResponse.FromString,
            options, channel_credentials,
            insecure, call_credentials, compression, wait_for_ready, timeout, metadata)
